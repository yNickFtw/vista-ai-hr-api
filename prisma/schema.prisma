// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AnalysisStatus {
  PENDING
  COMPLETED
  FAILED
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  user_summary UserSummary?
  user_skills UserSkill[]
  experiences Experience[]
  user_areas UserArea[]
  analyses Analysis[]
  analysisCandidates AnalysisCandidate[]
  is_recruiter Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Area {
  id String @id @default(uuid())
  name String
  description String?
  skills Skill[]
  user_areas UserArea[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  parentId String?
  parent Area? @relation("AreaHierarchy", fields: [parentId], references: [id])
  subAreas Area[] @relation("AreaHierarchy")

  @@index([parentId])
  @@map("areas")
}

model UserArea {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  areaId String
  area Area @relation(fields: [areaId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, areaId])
  @@map("user_areas")
}

model Skill {
  id String @id @default(uuid())
  name String
  description String?
  areaId String?
  area Area? @relation(fields: [areaId], references: [id])
  users_skills UserSkill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([areaId])
  @@map("skills")
}

model UserSkill {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  skillId String
  skill Skill @relation(fields: [skillId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, skillId])
  @@map("user_skills")
}

model UserSummary {
  id String @id @default(uuid())
  content String?
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("user_summaries")
}

model Experience {
  id String @id @default(uuid())
  title String
  description String?
  startDate DateTime
  endDate DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("experiences")
}

model Analysis {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  analysisCandidates AnalysisCandidate[]
  query String?
  status AnalysisStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("analyses")
}

model AnalysisCandidate {
  id String @id @default(uuid())
  analysisId String
  analysis Analysis @relation(fields: [analysisId], references: [id])
  candidateId String
  candidate User @relation(fields: [candidateId], references: [id])

  analysis_summary String?
  score Int?
  technical_match_score Int?
  business_fit_score Int?
  behavioral_match_score Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([analysisId, candidateId])
  @@map("analysis_candidates")
}
